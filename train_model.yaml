name: Train Model
description: Trains the model using provided data and config parameters.
inputs:
  - {name: data_path, type: String}               # Graph data object
  - {name: model, type: Model}             # TGCN/GCN model from build model brick
  - {name: config, type: Json}           # Training configuration (epochs, etc.)
outputs:
  - {name: trained_model, type: Model}     # Trained model object
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torch_geometric || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torch_geometric --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import torch
        import argparse
        import pickle
        
        # Parse arguments
        parser = argparse.ArgumentParser()
        parser.add_argument('--data_path', type=str, required=True)
        parser.add_argument('--model', type=str, required=True)
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        args = parser.parse_args()
        
        # Load inputs
        print("Loading data...")
        data = torch.load(args.data_path)
            
        print("Loading model...")
        model = torch.load(args.model)
            
        print("Loading config...")
        with open(args.config_file) as f:
            config = json.load(f)
        
        # Extract epochs from config
        epochs = config.get('epochs', model.epochs)
        
        # --- Training Loop (extracted from main code) ---
        print("\n--- Starting Model Training ---")
        for epoch in range(epochs):
            loss = model.train_step(data, data.train_mask)
            if epoch % 10 == 0:
                print(f"Epoch {epoch:03d} | Loss: {loss:.4f}")
        print("--- Finished Model Training ---\n")
        
        # Save trained model
        print("Saving trained model...")
        torch.save(model, args.trained_model)
        print(f"Saved trained model to {args.trained_model}")
    args:
      - --data_path
      - {inputPath: data_path}
      - --model
      - {inputPath: model}
      - --config
      - {inputPath: config}
      - --trained_model
      - {outputPath: trained_model}
